[{"/home/abc/Documents/my-app/src/index.js":"1","/home/abc/Documents/my-app/src/App.js":"2","/home/abc/Documents/my-app/src/reportWebVitals.js":"3","/home/abc/Documents/my-app/src/components/BasicTable.js":"4","/home/abc/Documents/my-app/src/components/columns.js":"5","/home/abc/Documents/my-app/src/components/SortingTable.js":"6","/home/abc/Documents/my-app/src/components/filteringTable.js":"7","/home/abc/Documents/my-app/src/components/GlobalFilter.js":"8","/home/abc/Documents/my-app/src/components/ColumnFilter.js":"9"},{"size":500,"mtime":1610127061699,"results":"10","hashOfConfig":"11"},{"size":708,"mtime":1610994258510,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1610127061699,"results":"13","hashOfConfig":"11"},{"size":1759,"mtime":1610732065757,"results":"14","hashOfConfig":"11"},{"size":1544,"mtime":1611068727801,"results":"15","hashOfConfig":"11"},{"size":1760,"mtime":1610734005966,"results":"16","hashOfConfig":"11"},{"size":1995,"mtime":1611068677985,"results":"17","hashOfConfig":"11"},{"size":277,"mtime":1610991247659,"results":"18","hashOfConfig":"11"},{"size":315,"mtime":1611068282218,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"18dtj18",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/abc/Documents/my-app/src/index.js",[],["43","44"],"/home/abc/Documents/my-app/src/App.js",[],"/home/abc/Documents/my-app/src/reportWebVitals.js",[],"/home/abc/Documents/my-app/src/components/BasicTable.js",["45","46"],"import React, { memo, useMemo } from 'react'\nimport { useTable } from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS,GROUPED_COLUMNS } from './columns'\nimport './table.css'\n\nexport const BasicTable = () => {\n  const columns = useMemo(() => GROUPED_COLUMNS, [])\n  const data = useMemo(() => MOCK_DATA, [])\n\n  const tableInstance = useTable({\n    columns,\n    data\n  })\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    footerGroups\n    ,\n    rows,\n    prepareRow\n  } = tableInstance\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n            <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\n              ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n          {rows.map((row) => {\n              prepareRow(row)\n              return (\n                <tr {...row.getRowProps()}>\n                    {\n                        row.cells.map((cell) => {\n                            return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                        })\n                    }\n              </tr>\n              )\n          })}\n        \n      </tbody>\n      <tfoot>\n        {footerGroups.map(footerGroup =>(\n          <tr {...footerGroup.getFooterGroupProps()}>\n            {\n              footerGroup.headers.map(column =>(\n                <td {...column.getFooterGroupProps}>\n                  {\n                    column.render('Footer')\n                  }\n\n                </td>\n              ))\n            }\n          </tr>\n        ))}\n      </tfoot>\n    </table>\n  )\n}\n",["47","48"],"/home/abc/Documents/my-app/src/components/columns.js",[],"/home/abc/Documents/my-app/src/components/SortingTable.js",["49","50"],"import React, { memo, useMemo } from 'react'\nimport { useTable, useSortBy } from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS, GROUPED_COLUMNS } from './columns'\nimport './table.css'\n\nexport const SortingTable = () => {\n  const columns = useMemo(() => GROUPED_COLUMNS, [])\n  const data = useMemo(() => MOCK_DATA, [])\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data\n    },\n    useSortBy\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    footerGroups,\n    rows,\n    prepareRow\n  } = tableInstance\n\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                {column.render('Header')}\n                <span>\n                    {column.isSorted ? (column.isSortedDesc ? 's':'yy'):'' }\n                </span>\n              </th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map(row => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n      <tfoot>\n        {footerGroups.map(footerGroup => (\n          <tr {...footerGroup.getFooterGroupProps()}>\n            {footerGroup.headers.map(column => (\n              <td {...column.getFooterGroupProps}>{column.render('Footer')}</td>\n            ))}\n          </tr>\n        ))}\n      </tfoot>\n    </table>\n  )\n}\n","/home/abc/Documents/my-app/src/components/filteringTable.js",["51"],"/home/abc/Documents/my-app/src/components/GlobalFilter.js",["52"],"import { fi } from 'date-fns/locale'\nimport React from 'react'\n\nexport const GlobalFilter =({filter,setFilter})=>{\n    return (\n        <span>\n            Search:{' '}\n            <input value={filter || ''} onChange={(e) => setFilter(e.target.value)}/>\n        </span>\n    )\n}","/home/abc/Documents/my-app/src/components/ColumnFilter.js",["53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":21},{"ruleId":"58","severity":1,"message":"62","line":4,"column":10,"nodeType":"60","messageId":"61","endLine":4,"endColumn":17},{"ruleId":"54","replacedBy":"63"},{"ruleId":"56","replacedBy":"64"},{"ruleId":"58","severity":1,"message":"59","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":21},{"ruleId":"58","severity":1,"message":"62","line":4,"column":10,"nodeType":"60","messageId":"61","endLine":4,"endColumn":17},{"ruleId":"58","severity":1,"message":"65","line":4,"column":19,"nodeType":"60","messageId":"61","endLine":4,"endColumn":34},{"ruleId":"58","severity":1,"message":"66","line":1,"column":10,"nodeType":"60","messageId":"61","endLine":1,"endColumn":12},{"ruleId":"58","severity":1,"message":"66","line":1,"column":10,"nodeType":"60","messageId":"61","endLine":1,"endColumn":12},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'memo' is defined but never used.","Identifier","unusedVar","'COLUMNS' is defined but never used.",["67"],["68"],"'GROUPED_COLUMNS' is defined but never used.","'fi' is defined but never used.","no-global-assign","no-unsafe-negation"]